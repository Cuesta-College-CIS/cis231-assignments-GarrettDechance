Elaboration:
    I attempted to keep the main method as clean as possible by utilizing multiple other methods to perform the needed actions. These methods work as follows:
        genArray(): This method takes the number, previously input by the user, as its parameter, and creates an an array of a size equal to the input.
            The method then begins a loop, filling out the array with numbers generated by the Java Random utilty. In the event of an
            even number, the method prints a statement requesting an even number, and returns a blank array, with the median value of 0.
        medSort(): This method takes an array as its parameter and creates a copy of it. It then uses the variables greatVal and greatIdx
            to iterate through the array, locating and indexing the greatest number. Upon reaching the end, the greatest value found is 
            swapped to the end of the array. This method repeats until the array is sorted, and the newly sorted array is returned.
        printArray(): This method iterates through the given array, printing each value, with a comma and space after each, until the final
            value, where a newline is printed in place of the comma.
        main(): This method takes the user input via the Java Scanner utility and creates an array of a size equal to the input, and calls
            the genArray() method. The original array is then set equal to the array returned by genArray(), and printed, calling the
            printArray() method. Finally, the array is sorted by calling the medSort() method, and the median is printed using half the size
            of the array as its index.

Test Data and Output:
    Input: 5
    Output: 14, 23, 30, 70, 97
            The median value is: 30
    
    Input: 5
    Output: 27, 4, 80, 25, 9
            The median value is: 25
    
    Input: 6
    Output: Please provide an odd number
            0, 0, 0, 0, 0, 0
            The median value is: 0

    Input: 7
    Output: 94, 83, 47, 44, 85, 17, 30
            The median value is: 47

Errors and troubleshooting:
    This part was pretty straightforward, however, I did run into an Array Index Out Of Bounds Exception before subtracting 1 from the 
    sortedArray.length in the medSort() method, as I had forgotten that the length of the array would not be the index, because I have 
    developed a habit of counting from the index of zero, and expecting the size to be the final index.