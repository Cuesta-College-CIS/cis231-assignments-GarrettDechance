Elaboration:
    The methods work as follows:
        genArray(): This method takes the number, previously input by the user, as its parameter, and creates an an array of a size equal to the input. //Reused from question 1
            The method then begins a loop, filling out the array with numbers generated by the Java Random utilty. In the event of an
            even number, the method prints a statement requesting an even number, and returns a blank array, with the median value of 0.
        findSubsequence(): This method takes an array as its parameter and creates a copy of it. It then uses the variables maxTrio and trioIdx
            to iterate through the array, locating and indexing the greatest summed consecutive trio of numbers by taking the current iteration
            value, adding that index + 1 and index + 2. Upon reaching the end, the trio is assigned to the consec String variable, to make
            referencing it easier, which is then printed.
        printArray(): This method iterates through the given array, printing each value, with a comma and space after each, until the final             //Reused from question 1
            value, where a newline is printed in place of the comma.
        main(): This method takes the user input via the Java Scanner utility and creates an array of a size equal to the input, and calls              //Modified from question 1
            the genArray() method. The original array is then set equal to the array returned by genArray(), and printed, calling the
            printArray() method. Finally, the findSubsequence() method is called, which finds and prints the trio, as mentioned above.

Test Data and Output:
    Input: 5
    Output: 35, 43, 86, 32, 68
            86 32 68
    
    Input: 9
    Output: 15, 15, 36, 19, 37, 57, 88, 20, 30
            37 57 88
    
    Input: 5
    Output: 36, 36, 38, 63, 2
            36 38 63

Errors and troubleshooting:
    This question was extremely straight forward, once I took the time to figure out how I wanted to build the findSubsequence() method.
    Throughout writing this, I never received any errors, other than Resource leak: 'scnr' is never closed, which was fixed by closing the 
    scanner on the next line.